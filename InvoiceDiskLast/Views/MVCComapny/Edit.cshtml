@model InvoiceDiskLast.Models.MVCCompanyInfoModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

   
@using (Html.BeginForm("Edit", "MVCComapny", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.CompanyID, new { htmlAttributes = new { @class = "form-control" } })
       
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <input type="file" id="input-file-now-custom-1" name="Files" class="dropify" data-default-file="/images/@Model.CompanyLogo" />
                        @Html.HiddenFor(model => model.CompanyLogo)
                    </div>
                </div>
            </div>
        </div>
     
        <div class="row">
            <div class="col-md-4">
               <label>Name</label>
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-8">
               <label>Address</label>
                @Html.EditorFor(model => model.CompanyAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <label>Street</label>
                @Html.EditorFor(model => model.StreetNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StreetNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>postal Code</label>
                @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>Website</label>
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <label>City</label>
                @Html.EditorFor(model => model.CompanyCity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyCity, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>State</label>
                @Html.EditorFor(model => model.CompanyState, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyState, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>Country</label>
                @Html.EditorFor(model => model.CompanyCountry, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyCountry, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <label>Phone</label>
                @Html.EditorFor(model => model.CompanyPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyPhone, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>Cell</label>
                @Html.EditorFor(model => model.CompanyCell, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyCell, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>Email</label>
                @Html.EditorFor(model => model.CompanyEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <label>Bank Name</label>
                @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>IBAN Number</label>
                @Html.EditorFor(model => model.IBANNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IBANNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>TRN Number</label>
                @Html.EditorFor(model => model.CompanyTRN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CompanyTRN, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <div class="row">
            <div class="col-md-4">
                <label>BIC Number</label>
                @Html.EditorFor(model => model.BIC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BIC, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>KVK Number</label>
                @Html.EditorFor(model => model.KVK, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.KVK, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>BTW Number</label>
                @Html.EditorFor(model => model.BTW, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BTW, "", new { @class = "text-danger" })
            </div>
        </div>
     
    </div>
    <hr />
        <div class="form-group">
            <div class="col-md-12">
                <a href="/Home/Index" class="btn btn-info"><i class="fa fa-angle-double-left" style="margin-right:5px"></i>Back to Home</a>
                <input type="submit" value="Save" class="btn btn-success" />               
            </div>
        </div>

}

<script>
        $(document).ready(function() {
            // Basic
            $('.dropify').dropify();

            // Translated
            $('.dropify-fr').dropify({
                messages: {
                    default: 'Glissez-déposez un fichier ici ou cliquez',
                    replace: 'Glissez-déposez un fichier ou cliquez pour remplacer',
                    remove: 'Supprimer',
                    error: 'Désolé, le fichier trop volumineux'
                }
            });

            // Used events
            var drEvent = $('#input-file-events').dropify();

            drEvent.on('dropify.beforeClear', function(event, element) {
                return confirm("Do you really want to delete \"" + element.file.name + "\" ?");
            });

            drEvent.on('dropify.afterClear', function(event, element) {
                alert('File deleted');
            });

            drEvent.on('dropify.errors', function(event, element) {
                console.log('Has Errors');
            });

            var drDestroy = $('#input-file-to-destroy').dropify();
            drDestroy = drDestroy.data('dropify')
            $('#toggleDropify').on('click', function(e) {
                e.preventDefault();
                if (drDestroy.isDropified()) {
                    drDestroy.destroy();
                } else {
                    drDestroy.init();
                }
            })
        });
    </script>




