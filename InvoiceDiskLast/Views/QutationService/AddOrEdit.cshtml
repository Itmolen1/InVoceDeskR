
@model InvoiceDiskLast.Models.MVCQutationViewModel

@{
    ViewBag.Title = "AddOrEdit";
}

<h2>AddOrEdit</h2>


<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>

<style>
    .pt-3-half {
        padding-top: 1.4rem;
    }
</style>


@{

    var Contectdatas = ViewBag.Contentdata;
    var CompanyDatas = ViewBag.Companydata;


}

<div class="container">

    @*<input type="hidden"  value=" " id="PurchaseOrderID"/>*@
    <input type="hidden" value="@(Model.QutationID !=null?Model.QutationID:0)" id="QutationID" />

    <input type="hidden" class="Purchase_ID" value="@Model.Qutation_ID" />

    <input type="hidden" value="@Contectdatas.ContactsId" id="contactId" />
    <div class="row">

        <div class="col-sm-12" style="background-color:white;margin-top:40px">
            <div class="row">
                <div class="col-sm-1"></div>
                <div class="col-sm-3">
                    <img src="@Url.Content("/Images/"+@CompanyDatas.CompanyLogo)" class="img-responsive" id="targetImg" style="border:none" />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />


                    @Contectdatas.ContactName
                    <br />
                    @Contectdatas.ContactAddress
                    <br />
                    @Contectdatas.PostalCode, @Contectdatas.StreetNumber @Contectdatas.City,
                    <br />
                    @Contectdatas.PostalCode



                </div>
                <div class="col-sm-4"></div>
                <div class="col-sm-4">
                    <br />
                    <br />
                    <br />
                    <h5 style="margin-left:125px">@CompanyDatas.CompanyName</h5>
                    <hr />
                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2 pull-left">Kvk nr:</div>
                        <div class="col-sm-8">@CompanyDatas.KVK</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-1"></div>
                        <div class="col-sm-3"><div class="pull-right"> BTW nr:</div></div>
                        <div class="col-sm-8">@CompanyDatas.BTW</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2 pull-right"><div class="pull-right">Bank:</div></div>
                        <div class="col-sm-8">@CompanyDatas.BankName</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2 pull-right"><div class="pull-right">IBAN:</div></div>
                        <div class="col-sm-8">@CompanyDatas.IBANNumber</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2 pull-right"><div class="pull-right">BIC:</div></div>
                        <div class="col-sm-8">@CompanyDatas.BIC</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2"><div class="pull-right">Tel:</div></div>
                        <div class="col-sm-8">@CompanyDatas.CompanyPhone</div>
                    </div>

                    <div class="row">
                        <div class="col-sm-2"></div>
                        <div class="col-sm-2"><div class="pull-right">Cel:</div></div>
                        <div class="col-sm-8">@CompanyDatas.CompanyCell</div>
                    </div>

                    <div class="row">
                        <div class="col-sm-1"></div>
                        <div class="col-sm-3 pull-right"><div class="pull-right">E-mail:</div></div>
                        <div class="col-sm-8">@CompanyDatas.CompanyCell</div>
                    </div>

                    <div class="row">
                        <div class="col-sm-1"></div>
                        <div class="col-sm-3 pull-right"><div class="pull-right">Website:</div></div>
                        <div class="col-sm-8">@CompanyDatas.Website</div>
                    </div>

                    <div class="row">

                        <div class="col-sm-4 pull-right"><div class="pull-right">Bezoekadres:</div></div>
                        <div class="col-sm-8">
                            @CompanyDatas.CompanyAddress<br />
                            @CompanyDatas.PostalCode   @CompanyDatas.CompanyCity <br />
                            @CompanyDatas.CompanyCountry
                        </div>
                    </div>


                </div>
            </div>


            <div class="row">
                <div class="col-sm-1"></div>
                <div class="col-sm-11">
                    <h4 style="color:skyblue">Qutation</h4>
                    <div class="form-horizontal">
                        <div class="row">
                            <div class="col-sm-2">Qutation Date:</div>
                            <div class="col-sm-4">

                                @Html.EditorFor(model => model.QutationDate, new { htmlAttributes = new { @style = "font-size:12px", @class = "form-control MAterialDatepicker", id = "QutationDate" } })
                                @Html.ValidationMessageFor(model => model.QutationDate, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6"></div>
                        </div>

                        <div class="row" style="margin-top:3px">
                            <div class="col-sm-2">Qutation Number:</div>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Qutation_ID, new { htmlAttributes = new { @style = "font-size:12px", @class = "form-control", id = "Qutation_ID", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Qutation_ID, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-sm-6"></div>
                        </div>

                        <div class="row" style="margin-top:3px">
                            <div class="col-sm-2">Due Date:</div>
                            <div class="col-sm-4">

                                @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @style = "font-size:12px", @class = "form-control MAterialDatepicker", id = "DueDate", title = "Due Date", required = "required" } })
                                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-sm-6"></div>
                        </div>


                        <div class="row" style="margin-top:3px">
                            <div class="col-sm-2">Refrence Number:</div>
                            <div class="col-sm-4">

                                @Html.EditorFor(Model => Model.RefNumber, new { htmlAttributes = new { @style = "font-size:12px", @class = "form-control", id = "RefNumber", required = "required" } })
                                @Html.ValidationMessageFor(model => model.RefNumber, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6"></div>
                        </div>



                        <div class="row">
                            <table class="table" id="QutationServiceDetail">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>
                                            Services
                                        </th>
                                        <th>
                                            Number Of hour
                                        </th>
                                        <th>
                                            Hourly rate
                                        </th>
                                        <th>
                                            Total
                                        </th>
                                        <th>
                                            Vat %
                                        </th>
                                        <th>
                                            Action
                                        </th>
                                        <th>

                                        </th>
                                        <th>

                                        </th>

                                    </tr>

                                    <tr id="mainrow">
                                        <td>
                                            <select id="SelectProductQutationp" class="productp form-control pClassp" style="font-size:12px"></select>
                                        </td>
                                        <td>
                                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @style = "font-size:12px", @type = "text", @class = "Quantity form-control", id = "QuantityE" } })
                                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                        </td>
                                        <td>


                                            @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @style = "font-size:12px", @class = "PurchaseItemRate form-control", id = "RateE" } })
                                            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })


                                        </td>
                                        <td>

                                            @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @style = "font-size:12px", @class = "PurchaseTotal form-control", id = "PurchaseTotal", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
                                        </td>
                                        <td>

                                            <select id="SelectVATp" class="VATp form-control" style="width:80px;font-size:12px">
                                                <option>0</option>
                                                <option>6</option>
                                                <option>21</option>
                                            </select>

                                        </td>
                                        <td>

                                            <input type="button" id="addpuchase1" value="add" class="btn btn-success" style="width:80px" />

                                    </tr>
                                </thead>

                                <tbody class="tbody">

                                    @if (ViewBag.QutationDatailsList != null)
                                    {
                                        if (ViewBag.QutationDatailsList != null)
                                        {
                                            foreach (var item in ViewBag.QutationDatailsList)
                                            {

                                                <tr id="@item.QutationDetailId">

                                                    <td>

                                                        <select Id="SelectProductQutationp" class="productp form-control pClass" style="width:216px !important;font-size:12px">
                                                            <option value="0">Select Item..</option>
                                                            @foreach (var product in ViewBag.Product)
                                                            {
                                                                <option value="@product.ProductId" @(product.ProductId == item.ItemId ? "selected='selected'" : "")>@product.ProductName</option>
                                                            }
                                                        </select>
                                                    </td>
                                                    <td>
                                                        <input type="text" class="quantity form-control" id="QuantityE" value="@item.Quantity" style="font-size:12px" />
                                                    </td>

                                                    <td>
                                                        <input type="text" class="PurchaseItemRate  rate form-control" id="Rate" value="@item.Rate" style="font-size:12px" />
                                                    </td>
                                                    <td>
                                                        <input type="text" class="PurchaseTotal  FTotal form-control" id="FTotal" value="@item.Total" readonly="readonly" style="font-size:12px" />

                                                    </td>
                                                    <td>
                                                        <select id="SelectVAT" name="NewsCategoriesID" class="VATp  form-control" style="width:80px;font-size:12px">

                                                            @foreach (var item1 in ViewBag.VatDrop)
                                                            {
                                                                <option value="@item1.Vat1" @(item1.Vat1 == item.Vat ? "selected='selected'" : "")>@item1.Name</option>
                                                            }
                                                        </select>

                                                    </td>
                                                    <td>
                                                        <button type="button" id="RemoveEdit2" class="btn btn-danger">Remove</button>
                                                    </td>
                                                    <td>
                                                        <input type="hidden" class="QutationDetailId" value="@item.QutationDetailId" />

                                                    </td>
                                                    <td>
                                                        <input type="hidden" class="QutationID" value="@item.QutationID" />

                                                    </td>


                                                </tr>
                                            }
                                        }
                                    }

                                </tbody>
                                <tr id="mainrow">
                                    <td>
                                        <select id="SelectProductQutationp" class="productp form-control pClassp" style="font-size:12px"></select>
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @style = "font-size:12px", @type = "text", @class = "Quantity form-control", id = "QuantityE" } })
                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                    </td>
                                    <td>


                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @style = "font-size:12px", @class = "PurchaseItemRate form-control", id = "RateE" } })
                                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })


                                    </td>
                                    <td>

                                        @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @style = "font-size:12px", @class = "PurchaseTotal form-control", id = "PurchaseTotal", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
                                    </td>
                                    <td>

                                        <select id="SelectVATp" class="VATp form-control" style="width:80px;font-size:12px">
                                            <option>0</option>
                                            <option>6</option>
                                            <option>21</option>
                                        </select>

                                    </td>
                                    <td>

                                        <input type="button" id="addpuchase1" value="add" class="btn btn-success" style="width:80px" />

                                </tr>
                            </table>
                        </div>
                        <div class="row">
                            <div id="OrderItems">
                                <table class="table" id="QutationServiceDetail"></table>
                                <span id="orderItemError" style="color:red"></span>
                            </div>

                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-sm-8">
                            </div>
                            <div class="col-sm-2">Sub Total:</div>
                            <div class="col-sm-2">

                                @if (Model.SubTotal != 0)
                                {
                                    <label id="SubTotalp">@Model.SubTotal</label>
                                }
                                else
                                {
                                    <label id="SubTotalp"></label>
                                }


                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-8">
                            </div>
                            <div class="col-sm-2">Totaal excel BTW:</div>
                            <div class="col-sm-2">
                                @if (Model.SubTotal != 0)
                                {
                                    <label id="TotalBTWp">@Model.SubTotal</label>
                                }
                                else
                                {
                                    <label id="TotalBTWp">0.00</label>
                                }


                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-8">
                            </div>
                            <div class="col-sm-2">BTW0%:</div>
                            <div class="col-sm-2">
                                <label id="btwop"></label>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-8">
                            </div>
                            <div class="col-sm-2">BTW 6%:</div>
                            <div class="col-sm-2">

                                @if (Model.TotalVat6 != 0)
                                {
                                    <label id="BTW6p">@Model.TotalVat6</label>
                                }
                                else
                                {

                                    <label id="BTW6p">0.00</label>
                                }

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-8">
                            </div>
                            <div class="col-sm-2">BTW 21%:</div>
                            <div class="col-sm-2">
                                @if (Model.TotalVat21 != 0)
                                {
                                    <label id="BTW21p">@Model.TotalVat21</label>
                                }
                                else
                                {
                                    <label id="BTW21p">0.00</label>
                                }



                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-sm-2">Customer Note:</div>
                            <div class="col-sm-6">
                                @Html.TextAreaFor(model => model.CustomerNote, new { htmlAttributes = new { @style = "font-size:12px", @class = "form-control", id = "CustomerNote" } })
                                @Html.ValidationMessageFor(model => model.CustomerNote, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-2">Grand Total:</div>
                            <div class="col-sm-2">
                                <span class=""><b>&euro;:</b></span>

                                @if (Model.TotalAmount != 0)
                                {
                                    <label id="gtotalp">@Model.TotalAmount</label>
                                }
                                else
                                {
                                    <label id="gtotalp">0.00</label>
                                }


                            </div>
                        </div>
                        <div class="row" style="margin-top:3px">
                            <div class="col-sm-2"></div>
                            <div class="col-sm-6">

                            </div>
                            <div class="col-sm-2"></div>
                            <div class="col-sm-2">

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-xs-2">
                                <input id="Submitservice" type="button" value="Save draft" class="btn btn-success" style="margin:0px 5px" />
                            </div>
                            <div class="col-xs-2">
                                <input id="saveEmailp" type="button" value="Save + email" class="btn btn-success" style="margin:0px 5px" />
                            </div>
                            @*<div class="col-xs-3">
                                    <input id="savesendbyemail" type="button" value="Save + send by email " class="btn btn-primary" style="margin:0px 5px" />
                                </div>*@
                            <div class="col-xs-3">
                                <input id="SaveEmailPrintPrintp" type="button" value="Save + print and send and send ot yourself" class="btn btn-success" style="margin:0px 5px" />
                            </div>

                            <div class="col-sm-2"></div>

                        </div>

                    </div>

                </div>
            </div>

        </div>
    </div>


</div>





<div class="modal fade bs-example-modal-lg" id="CreateNewProductModalAdd" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myLargeModalLabe1lPur" style="color:skyblue">Add New Product</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
            <div class="modal-body">
                <form class="floating-labels">

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group m-b-40">
                                <input type="text" class="form-control " id="ProductName" data-toggle="tooltip" data-placement="bottom" title="Product Name!!">
                                <span class="bar"></span>
                                <label for="input5">Product Name</label>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group m-b-40">
                                <input type="text" class="form-control " id="Description" data-toggle="tooltip" data-placement="bottom" title="Product Description!!">
                                <span class="bar"></span>
                                <label for="input5"> Product Description</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group m-b-40">
                                <input type="text" class="form-control " id="SalePrice" data-toggle="tooltip" data-placement="bottom" title="Sale Price!!">
                                <span class="bar"></span>
                                <label for="input5">Sale Price</label>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group m-b-40">
                                <input type="text" class="form-control " id="PurchasePrice" data-toggle="tooltip" data-placement="bottom" title="Purchase Price!!">
                                <span class="bar"></span>
                                <label for="input5">Purchase Price</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group m-b-40">
                                <input type="text" class="form-control " id="OpeningQuantity" data-toggle="tooltip" data-placement="bottom" title="Opening Quantity!!">
                                <span class="bar"></span>
                                <label for="input5">Opening Quantity</label>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="col-sm-12">
                                <select class="form-control p-0" id="ProductUnitSelectPurchase"></select>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="SaveNewProductModelp" class="btn btn-success d-none d-lg-block m-l-15"><i class="fa fa-plus-circle"></i>Save Product</button>
                <button type="button" class="btn btn-danger waves-effect text-left" id="CancelProductModel" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<div id="UnitModelPurchase" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Add new unit</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group ">
                            <input class="form-control" type="text" required id="ProductUnit" placeholder="Unit Name" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="SaveNewProductUnitPurchase" class="btn btn-success d-none d-lg-block m-l-15"><i class="fa fa-plus-circle" style="padding-right: 10px"></i>Save</button>
                <button type="button" class="btn btn-danger waves-effect text-left" id="CancelProductUnitPurchase" data-dismiss="modal"><i class="fa fa-window-close" style="padding-right: 10px"></i>Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>


@*<script>
    $(document).ready(function () {
        $('#QutationDate').bootstrapMaterialDatePicker({ weekStart: 0, time: false });
        $('#QutationDate').bootstrapMaterialDatePicker({ weekStart: 0, time: false });

    });
</script>*@
<script type="text/javascript">

    
    var currentRow1 = "";
    var r = "";

    function SUMOFALLPRODUCTp() {

        var sum = 0;
        $('#QutationServiceDetail tbody tr').each(function () {
            var row = $(this).closest('tr');
            var total = row.find('td:eq(3)').find('.PurchaseTotal').val();
            if (!isNaN(total) && total.length != 0) {
                sum += parseFloat(total);
            }
            $('#TotalBTWp').text(sum.toFixed(2));
            $('#SubTotalp').text(sum.toFixed(2));
        })
    }
    function sumofGrandModelp() {

        var btw6p = 0, btw21p, totalbtwp = 0, grandtotalp = 0;
        btw6p = parseFloat($('#BTW6p').text());
        btw21p = parseFloat($('#BTW21p').text());
        totalbtwp = parseFloat($('#TotalBTWp').text());
        btw6p = isNaN(btw6p) ? 0 : btw6p;
        btw21p = isNaN(btw21p) ? 0 : btw21p;
        totalbtwp = isNaN(totalbtwp) ? 0 : totalbtwp;
        grandtotalp = parseFloat(btw6p) + parseFloat(btw21p) + parseFloat(totalbtwp);
        var t = parseFloat(grandtotalp);
        $('#gtotalp').text(t.toFixed(2));
        //
        //if (!isNaN(grandtotal) && grandtotal.length != 0) {
    }
    function calculatevatp() {
        if ($('#QutationServiceDetail tbody tr').length == 0) {
            $('#btwop').text('0.00');
            $('#BTW6p').text('0.00');
            $('#BTW21p').text('0.00');
            $('#gtotalp').val('0.00');

            $('#TotalBTWp').text('0.00');
            $('#TotalBTWp').text('0.00');
            $('#SubTotalp').text('0.00');

        }
        else {

            var sum0 = 0;
            var total0 = 0;
            $('#QutationServiceDetail tbody tr').each(function () {
                $('#BTW0p').text();

                r = $(this).closest('tr');
                var value = r.find('.VATp  option:selected').val();
                if (r.find('.VATp   option:selected').val() == 0) {
                    total0 = r.find('td:eq(3)').find('input').val();
                    if (!isNaN(total0) && total0.length != 0) {
                        sum0 += parseInt(total0);
                    }
                    var totalvat0 = parseFloat(sum0 / 100 * 6 + sum0 - sum0);
                    var totalr = Math.round(totalvat0, 2);
                    $('#BTW0p').text(totalvat0.toFixed(2));
                }
                else {
                    $('#BTW0p').text('0.00');
                }
            })
        }

        var sum6 = 0;
        var total6 = 0;
        $('#QutationServiceDetail tbody tr').each(function () {
            var r = $(this).closest('tr');
            var value = r.find('.VATp   option:selected').val();
            if (r.find('.VATp   option:selected').val() == 6) {
                total6 = r.find('td:eq(3)').find('input').val();
                if (!isNaN(total6) && total6.length != 0) {
                    sum6 += parseInt(total6);
                }
                var totalvat6 = parseFloat(sum6 / 100 * 6 + sum6 - sum6);
                var totalr = Math.round(totalvat6, 2);
                $('#BTW6p').text(totalvat6.toFixed(2));
            }
        })

        var sum21 = 0;
        var total21 = 0;
        $('#QutationServiceDetail tbody  tr ').each(function () {
            //$('#BTW21').text();
            var r = $(this).closest('tr');
            var value = r.find('.VATp   option:selected').val();
            if (r.find('.VATp   option:selected').val() == 21) {

                total21 = r.find('td:eq(3)').find('input').val();
                if (!isNaN(total21) && total21.length != 0) {
                    sum21 += parseInt(total21);
                }
                var totalvat21 = parseFloat(sum21 / 100 * 21 + sum21 - sum21);

                $('#BTW21p').text(totalvat21.toFixed(2));
            }

        })
        RowCountep();
    }
    function RowCountep() {

        var rowCount6 = 0;
        var rowCount21 = 0;
        var rowCount0 = 0;

        $('#QutationServiceDetail tbody tr td').each(function () {


            var EquationResult = $(this).find('.VATp').val();

            if (EquationResult == 6) {
                rowCount6++;

            }
            else if (EquationResult == 21) {
                rowCount21++;
            }
            else if (EquationResult == 0) {
                rowCount0++
            }
        })

        if (rowCount0 == 0) {
            $("#btwop").text('0.00');
        }
        if (rowCount6 == 0) {
            $("#BTW6p").text('0.00');
        }
        if (rowCount21 == 0) {
            $("#BTW21p").text('0.00');
        }

        if ($('#QutationServiceDetail tbody tr').length == 0) {

            $('#SubTotalp').text();
            $('#TotalBTWp').text();
            $('#gtotalp').text('');
            $('#gtotalp').val('');
            $('#btwop').text('0.00');
            $('#BTW6p').text('0.00');
            $('#BTW21p').text('0.00');
            $('#gtotalp').val('0.00');

            $('#TotalBTWp').text('0.00');
            $('#TotalBTWp').text('0.00');
            $('#SubTotalp').text('0.00');
        }
    }


    //adding Row
    $("#addpuchase1").click(function () {

        debugger;

        currentRow1 = $(this).closest("tr");

        var isAllValid = true;
        if ($("#mainrow #SelectProductQutationp").val() == "0") {
            isAllValid = false;
            alert("Please select Item");
            return;
        }

        if ($("#mainrow .Quantity").val() == 0) {
            isAllValid = false;
            alert("Please select quantity");
            return;
        }
        if ($("#mainrow .PurchaseTotal").val() == 0) {
            isAllValid = false;
            alert("Please select quantity");
            return;
        }


        if ($("#mainrow .PurchaseItemRate").val() == 0) {
            isAllValid = false;
            alert("Please select quantity");
            return;
        }


        if (isAllValid) {
            var $newRowp = $("#mainrow").clone().removeAttr('id');
            $('.productp', $newRowp).val($("#SelectProductQutationp").val());
            $('.VATp', $newRowp).val($("#SelectVATp").val());
            //Replace add button with remove button
            $("#addpuchase1", $newRowp).addClass('remove').val('Remove').removeClass('btn-success').addClass('btn-danger');
            //Remove id attribute from new clone row
            $("#productp,#PurchaseQuantity,#Ratep,#FTotalp,#SelectVATp", $newRowp).removeAttr('id');
            $('span.error', $newRowp).remove();
            $('#QutationServiceDetail').append($newRowp);

            $('#mainrow #SelectProductQutationp').val('0');
            $('#mainrow .Quantity ').val('');
            $('#mainrow .PurchaseItemRate ').val('');
            $('#mainrow .PurchaseTotal ').val('');
            $('#mainrow #VATp ').val('0');
            $('#mainrow .PurchaseTotal ').val('0');

            if ($('#orderItemError').text != '') {
                $('#orderItemError').text('');
            }
            calculatevatp();
            SUMOFALLPRODUCTp();
            sumofGrandModelp();

            $('#mainrow #SelectVATp').val(0);
        }
    });
    //end of adding row
    $('#QutationServiceDetail').on('click', '.remove', function () {

        debugger;
        var isAllValid = true;
        var currentRow = $(this).closest('tr');
        var vat = currentRow.find('.VATp   option:selected').val();
        var Total = currentRow.find('.PurchaseTotal').val();
        if (vat == 6) {
            var totalvat6 = parseInt(Total / 100) * 6 + (Total - Total);

            var BTW6 = $('#BTW6p').text();
            $('#BTW6p').text();
            $('#BTW6p').text(parseInt(BTW6 - totalvat6.toFixed(2)));

        }
        if (vat == 21) {
            var currentRow = $(this).closest('tr');
            var vat21 = currentRow.find('.VATp  option:selected').val();
            var Total21 = currentRow.find('.PurchaseTotal').val();
            if (vat == 21) {
                var totalvat21 = parseFloat(Total21 / 100) * 21 + (Total21 - Total21);

                var BTW21 = $('#BTW21p').text();
                $('#BTW21p').text();
                $('#BTW21p').text(parseFloat(BTW21 - totalvat21.toFixed(2)));

            }
        }
        $(this).parents('tr').remove();
        SUMOFALLPRODUCTp();
        sumofGrandModelp();

        if ($('#QutationServiceDetail tbody tr').length == 0) {
            $('#SubTotalp').text('0.00');
            $('#TotalBTWp').text('0.00');
            $('#gtotalp').text('0.00');
            $('#BTW6p').text('0.00');
            $('#BTW21p').text('0.00');
            $('#btwop').text('0.00');
            $('#SelectVATp').val(0);
        }
    });

    //main
    $('#PurchaseQuantity').keyup(function () {
        var currentRow = $(this).closest("tr");
        var quantity = $(this).val();  // get current row 1st TD value
        var Price = currentRow.find("td:eq(2)").find('input').val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total.toFixed(2));
    })

    $(document).on('keyup', "#QutationServiceDetail tbody #QuantityE", function () {

        debugger;
        var currentRow = $(this).closest("tr");
        var quantity = $(this).val();  // get current row 1st TD value
        var Price = currentRow.find("td:eq(2)").find('input').val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total);
    })



    $(document).on('keyup', " thead .Quantity", function () {

        debugger;
        var currentRow = $(this).closest("tr");
        var quantity = $(this).val();  // get current row 1st TD value
        var Price = currentRow.find("td:eq(2)").find('input').val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total);
    })

    $(document).on('keyup', " thead .PurchaseItemRate", function () {

        debugger;
        var currentRow = $(this).closest("tr");
        var Price = $(this).val();  // get current row 1st TD value
        var quantity = currentRow.find("td:eq(2)").find('input').val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total);
    })





    $(document).on('keyup', "#QutationServiceDetail tbody .PurchaseItemRate ", function () {

        currentRow1 = $(this).closest("tr");
        var currentRow = $(this).closest("tr");
        var quantity = currentRow.find("td:eq(1)").find('input').val(); // get current row 1st TD value
        var Price = $(this).val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total);
        var sum = 0;
        var vatValue = currentRow1.find('.VATp option:selected').val();
        if (vatValue == 0) {
            $('#btwop').text('0.00');
        }

        if (vatValue == 6) {
            var sum6 = 0;
            var total6 = 0;
            $('#QutationServiceDetail tbody tr').each(function () {
                r = $(this).closest('tr');
                var value = r.find('.VATp  option:selected').val();
                if (r.find('.VATp  option:selected').val() == 6) {
                    total6 = r.find('td:eq(3)').find('input').val();
                    if (!isNaN(total6) && total6.length != 0) {
                        sum6 += parseFloat(total6);
                    }
                    var totalvat6 = parseFloat(sum6 / 100 * 6 + sum6 - sum6);
                    $('#BTW6p').text(totalvat6.toFixed(2));
                }
            })
        }

        if (vatValue == 21) {
            var sum21 = 0;
            var total21 = 0;
            $('#QutationServiceDetail tbody tr').each(function () {
                r = $(this).closest('tr');
                var value = r.find('.VATp  option:selected').val();
                if (r.find('.VATp  option:selected').val() == 21) {
                    total21 = r.find('td:eq(3)').find('input').val();
                    if (!isNaN(total21) && total21.length != 0) {
                        sum21 += parseFloat(total21);
                    }
                    var totalvat21 = parseFloat(sum21 / 100 * 21 + sum21 - sum21);
                    $('#BTW21p').text(totalvat21.toFixed(2));
                }

            })
        }
        SUMOFALLPRODUCTp();
        sumofGrandModelp();
    })

    $(document).on('keyup', "#QutationServiceDetail tbody .Quantity ", function () {
        currentRow1 = $(this).closest("tr");
        var currentRow = $(this).closest("tr");
        var quantity = $(this).val();

        // get current row 1st TD value
        var Price = currentRow.find("td:eq(2)").find('input').val();

        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total.toFixed(2));
        var sum = 0;
        var vatValue = currentRow1.find('.VATp option:selected').val();
        if (vatValue == 0) {
            $('#btwop').text('0.00');
        }

        if (vatValue == 6) {
            var sum6 = 0;
            var total6 = 0;
            $('#orderdetailsitemsp tbody tr').each(function () {
                r = $(this).closest('tr');
                var value = r.find('.VATp  option:selected').val();
                if (r.find('.VATp  option:selected').val() == 6) {
                    total6 = r.find('td:eq(3)').find('input').val();
                    if (!isNaN(total6) && total6.length != 0) {
                        sum6 += parseFloat(total6);
                    }
                    var totalvat6 = parseFloat(sum6 / 100 * 6 + sum6 - sum6);
                    $('#BTW6p').text(totalvat6.toFixed(2));
                }
            })


        }

        if (vatValue == 21) {
            var sum21 = 0;
            var total21 = 0;
            $('#QutationServiceDetail tbody tr').each(function () {
                r = $(this).closest('tr');
                var value = r.find('.VATp  option:selected').val();
                if (r.find('.VATp  option:selected').val() == 21) {
                    total21 = r.find('td:eq(3)').find('input').val();
                    if (!isNaN(total21) && total21.length != 0) {
                        sum21 += parseFloat(total21);
                    }
                    var totalvat21 = parseFloat(sum21 / 100 * 21 + sum21 - sum21);
                    $('#BTW21p').text(totalvat21.toFixed(2));
                }

            })
        }


        SUMOFALLPRODUCTp();
        sumofGrandModelp();
    })

    $(document).on('change', '#QutationServiceDetail tbody .VATp', function () {
        currentRow1 = $(this).closest("tr");
        calculatevatp();
        SUMOFALLPRODUCTp();
        sumofGrandModelp();
       
    });

    $(document).ready(function () {
        localStorage.removeItem("drpstatusvalue");
        LoadProductSelect();

    });


    function LoadProductSelect() {
        LoadProductUnitPurchase();
        $("#mainrow #SelectProductQutationp").find("option").remove();
        $("#mainrow #SelectProductQutationp").prepend("<option value=0>" + 'Select Item' + "</option>");
        $("#mainrow #SelectProductQutationp").append("<option value=AddNewProductSelect>" + 'Add New Product' + "</option>");

        $.ajax({
            url: "/MVCProduct/GetProduct",
            type: "Get",
            async: false,
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            data: { ProductStatus: "Services" },

            success: function (data) {
                $.each(data, function (key, item) {
                    $('#mainrow #SelectProductQutationp').append($('<option></option>').val(item.ProductId).html(item.ProductName));
                });
            },
            Error: function (errormessage) {
                alert(errormessage);
            }
        });
    }

    // product price by id
    $('#mainrow .pClassp').change(function () {

        var currentRow = $(this).closest("tr");

        var value = $(this).val();
        if (value == "AddNewProductSelect") {
            LoadProductUnitPurchase();
            //  $('#VenderSelectModel').modal('hide');
            $('#CreateNewProductModalAdd').modal('show');
        }
        else if (value == "0") {

            return;
        }
        else {

            var productId = $(this).val();
            $.ajax({
                url: "/MVCQutation/ProductPricebyId",
                type: "POST",
                cache: false,
                data: { 'ProductId': productId },
                success: function (resultData) {
                    $('#mainrow #RateE').val(resultData);
                    ChangeTotalOnItemCahe(currentRow);
                },
                error: function (errormessage) {
                    // alert(errormessage)
                }
            });
        }
    })



    function ChangeTotalOnItemCahe(currentRow) {
        debugger;
        var quantity = currentRow.find("td:eq(1)").find('input').val();  // get current row 1st TD value
        var Price = currentRow.find("td:eq(2)").find('input').val();
        var total = quantity * Price;
        currentRow.find('td:eq(3)').find('input').val(total);

    }


    //end

    //number validation
    $("#mainrow .Quantity").on("keypress keyup blur", function (event) {
        //this.value = this.value.replace(/[^0-9\.]/g,'');
        $(this).val($(this).val().replace(/[^0-9]/g, ''));
        if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }
    });

    $("#mainrow #PurchaseItemRate").on("keypress keyup blur", function (event) {
        //this.value = this.value.replace(/[^0-9\.]/g,'');
        $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
        if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }
    });
    //end of number validation


    //saving detail
    $("#Submitservice").click(function () {
        var valid = validateQutationAddOrEdit();

        if (valid != true) {

            return true;
        }
        else {
            var isAllValid = true;
            $('#orderItemError').text('');
            var list = [];
            var errorItemCount = 0;
            $('#QutationServiceDetail .tbody tr').each(function (index, ele) {

                if ($('#SelectProductQutationp', this).val() == '0' ||
                     (parseInt($('#QuantityE', this).val()) || 0) == 0 ||
                     $('#Rate', this).val() == "" ||
                     isNaN($('.PurchaseItemRate', this).val())
                     ) {

                }
                else {
                    var orderItem = {
                        ItemId: $('select.productp', this).val(),
                        Quantity: parseInt($('#QuantityE', this).val()),
                        Rate: parseFloat($('.PurchaseItemRate', this).val()),
                        Total: parseFloat($('.PurchaseTotal', this).val()),
                        SubTotal: parseFloat($('#SubTotalp', this).val()),
                        Vat: parseFloat($('.VATp', this).val()),
                        QutationDetailId: $('.QutationDetailId', this).val(),
                        Qutation_ID: $('.Qutation_ID').val(),
                        QutationID: $('.QutationID').val()
                    }
                    list.push(orderItem);
                }
            });

            if (errorItemCount > 0) {
                $("#orderItemError").text(errorItemCount + "Invalid entry in order itme list.");
                isAllValid = false;
            }

            if (list.length == 0) {

                $("#orderItemError").text("At least one order item required.");
                isAllValid = false;
            }

            if (isAllValid) {

                $(this).val("please wait...");
                var empObj = {
                    Qutation_ID: $('#Qutation_ID').val(),
                    QutationDetailId: $('#QutationDetailId').val(),
                    RefNumber: $('#RefNumber').val(),
                    QutationDate: $('#QutationDate').val(),
                    DueDate: $('#DueDate').val(),
                    CustomerNote: $('#CustomerNote').val(),
                    DiscountAmount: 0,
                    QutationID: $('#QutationDetailId').val(),
                    SubTotal: $('#SubTotalp').text(),
                    SubTotal: $('#SubTotalp').text(),
                    TotalAmount: $('#gtotalp').text(),
                    CustomerNote: $('#PurchaseVenderNote').val(),
                    TotalVat6: $('#BTW6p').text(),
                    TotalVat21: $('#BTW21p').text(),
                    QutationID: $('.QutationID').val(),
                    QutationDetailslist: list
                };
                $.ajax({
                    url: "/QutationService/save",
                    data: JSON.stringify(empObj),
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {

                        console.log(result);

                        if (result.Status == "Success") {
                            list = [];
                            $('#QutationServiceDetail').empty();
                            $("#Submitservice").val('Save draft');
                            swal({
                                title: 'Service!',
                                text: 'Service save successfully!',
                                type: 'success'
                            },
                      function (isconform) {
                          window.location.href = "/QutationService/ViewServiceQutation?quautionId=" + result.Qutation;
                      });
                        }
                        else if (result.Status == "Fail") {
                            swal({
                                title: "Fail!",
                                text: result.Message,
                                icon: "danger",
                            });

                        }
                    },
                    error: function (errormessage) {
                        swal({
                            title: "Fail!",
                            text: errormessage,
                            icon: "danger",
                        });
                    }

                });

            }
        }

    });
    //saveing detail

    //Save Email
    $("#saveEmailp").click(function () {
        var valid = validateQutationAddOrEdit();

        if (valid != true) {

            return true;
        }
        else {
            var isAllValid = true;
            $('#orderItemError').text('');
            var list = [];
            var errorItemCount = 0;

            $('#QutationServiceDetail .tbody tr').each(function (index, ele) {


                if ($('#SelectProductQutationp', this).val() == '0' ||
                     (parseInt($('#QuantityE', this).val()) || 0) == 0 ||
                     $('#Rate', this).val() == "" ||
                     isNaN($('.PurchaseItemRate', this).val())
                     ) {

                }
                else {
                    var orderItem = {
                        ItemId: $('select.productp', this).val(),
                        Quantity: parseInt($('#QuantityE', this).val()),
                        Rate: parseFloat($('.PurchaseItemRate', this).val()),
                        Total: parseFloat($('.PurchaseTotal', this).val()),
                        SubTotal: parseFloat($('#SubTotalp', this).val()),
                        Vat: parseFloat($('.VATp', this).val()),
                        QutationDetailId: $('.QutationDetailId', this).val(),
                        Qutation_ID: $('.Qutation_ID').val(),
                        QutationID: $('.QutationID').val()
                    }
                    list.push(orderItem);
                }
            });

            if (errorItemCount > 0) {
                $("#orderItemError").text(errorItemCount + "Invalid entry in order itme list.");
                isAllValid = false;
            }

            if (list.length == 0) {

                $("#orderItemError").text("At least one order item required.");
                isAllValid = false;
            }

            if (isAllValid) {

                $(this).val("please wait...");
                var empObj = {
                    Qutation_ID: $('#Qutation_ID').val(),
                    QutationDetailId: $('#QutationDetailId').val(),
                    RefNumber: $('#RefNumber').val(),
                    QutationDate: $('#QutationDate').val(),
                    DueDate: $('#DueDate').val(),
                    CustomerNote: $('#CustomerNote').val(),
                    DiscountAmount: 0,
                    QutationID: $('#QutationDetailId').val(),
                    SubTotal: $('#SubTotalp').text(),
                    SubTotal: $('#SubTotalp').text(),
                    TotalAmount: $('#gtotalp').text(),
                    CustomerNote: $('#PurchaseVenderNote').val(),
                    TotalVat6: $('#BTW6p').text(),
                    TotalVat21: $('#BTW21p').text(),
                    QutationID: $('.QutationID').val(),
                    QutationDetailslist: list
                };
                $.ajax({
                    url: "/QutationService/saveEmail",
                    data: JSON.stringify(empObj),
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {

                        if (result.Status == "Success") {

                            swal({
                                title: 'Service!',
                                text: 'Service save successfully!',
                                type: 'success'
                            },
                            function (isconform) {
                                window.location.href = "/QutationService/InvoiceByEmail?QutationId=" + result.QutationId;
                            });
                            $("#saveEmailp").val('Save + Email');
                            list = [];

                        }
                        else if (result.Status == "Fail") {
                            swal({
                                title: "Fail!",
                                text: result.Message,
                                icon: "danger",
                            });
                        }
                    },
                    error: function (errormessage) {
                        swal({
                            title: "Fail!",
                            text: errormessage,
                            icon: "danger",
                        });
                    }

                });

            }
        }

    });

    //End save and Email

    //save print
    $("#SaveEmailPrintPrintp").click(function () {
        var valid = validateQutationAddOrEdit();

        if (valid != true) {

            return true;
        }
        else {


            var isAllValid = true;
            $('#orderItemError').text('');
            var list = [];
            var errorItemCount = 0;
            $('#QutationServiceDetail .tbody tr ').each(function (index, ele) {



                if ($('#SelectProductQutationp', this).val() == '0' ||
                     (parseInt($('#QuantityE', this).val()) || 0) == 0 ||
                     $('#Rate', this).val() == "" ||
                     isNaN($('.PurchaseItemRate', this).val())
                     ) {

                }
                else {
                    var orderItem = {
                        ItemId: $('select.productp', this).val(),
                        Quantity: parseInt($('#QuantityE', this).val()),
                        Rate: parseFloat($('.PurchaseItemRate', this).val()),
                        Total: parseFloat($('.PurchaseTotal', this).val()),
                        SubTotal: parseFloat($('#SubTotalp', this).val()),
                        Vat: parseFloat($('.VATp', this).val()),
                        QutationDetailId: $('.QutationDetailId', this).val(),
                        Qutation_ID: $('.Qutation_ID').val(),
                        QutationID: $('.QutationID').val()
                    }
                    list.push(orderItem);
                }
            });

            if (errorItemCount > 0) {
                $("#orderItemError").text(errorItemCount + "Invalid entry in order itme list.");
                isAllValid = false;
            }

            if (list.length == 0) {

                $("#orderItemError").text("At least one order item required.");
                isAllValid = false;
            }

            if (isAllValid) {

                $(this).val("please wait...");
                var empObj = {
                    Qutation_ID: $('#Qutation_ID').val(),
                    QutationDetailId: $('#QutationDetailId').val(),
                    RefNumber: $('#RefNumber').val(),
                    QutationDate: $('#QutationDate').val(),
                    DueDate: $('#DueDate').val(),
                    CustomerNote: $('#CustomerNote').val(),
                    DiscountAmount: 0,
                    QutationID: $('#QutationDetailId').val(),
                    SubTotal: $('#SubTotalp').text(),
                    SubTotal: $('#SubTotalp').text(),
                    TotalAmount: $('#gtotalp').text(),
                    CustomerNote: $('#PurchaseVenderNote').val(),
                    TotalVat6: $('#BTW6p').text(),
                    TotalVat21: $('#BTW21p').text(),
                    QutationID: $('.QutationID').val(),
                    QutationDetailslist: list
                };
                $.ajax({
                    url: "/QutationService/savePrintAndSentItToYouronsave",
                    data: JSON.stringify(empObj),
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    success: function (result) {

                        localStorage.setItem('path1', result.path);

                        if (result.Status == "Success") {

                            swal({
                                title: 'Service!',
                                text: 'Service save successfully!',
                                type: 'success'
                            },
                            function (isconform) {
                                window.location.href = "/QutationService/ViewServiceQutation?quautionId=" + result.QutationID;

                            });
                        }
                        else if (result.Status == "Fail") {
                            $("#SaveEmailPrintPrintp").val("Save + print and send and send ot yourself");


                            swal({
                                title: "Fail!",
                                text: result.Message,
                                icon: "danger",
                            });
                        }
                        console.log(result);

                    },
                    error: function (errormessage) {
                        swal({
                            title: "Fail!",
                            text: errormessage,
                            icon: "danger",
                        });
                    }

                });

            }
        }
    });


    function validateQutationAddOrEdit() {
        var isValid = true;

        if ($('#Qutation_ID').val().trim() == "") {
            $('#Qutation_ID').css('border-color', 'Red');

            isValid = false;
        }
        else {
            $('#Qutation_ID').css('border-color', 'lightgrey');
        }
        if ($('#DueDate').val().trim() == "") {
            $('#DueDate').css('border-color', 'Red');
            isValid = false;
        }
        else {
            $('#DueDate').css('border-color', 'lightgrey');
        }
        if ($('#RefNumber').val().trim() == "") {
            $('#RefNumber').css('border-color', 'Red');
            $('#RefNumber').focus();
            isValid = false;
        }
        else {
            $('#RefNumber').css('border-color', 'lightgrey');
        }
        if ($('#QutationDate').val() == "") {
            $('#QutationDate').css('border-color', 'Red');
            isValid = false;
        }
        else {
            $('#QutationDate').css('border-color', 'lightgrey');
        }

        if ($('#QutationDate1').val() == "") {
            $('#QutationDate1').css('border-color', 'Red');
            isValid = false;
        }
        else {
            $('#QutationDate1').css('border-color', 'lightgrey');
        }
        return isValid;
    }



    $(document).ready(function () {

        $(document).on('click', '#RemoveEdit1', function () {

            var row = $(this).closest('tr');

            var PurchaseOrderId = $('#PurchaseOrderID').val();
            var purchaseTotal = row.find('td').find('.PurchaseTotal').val();
            var vat = row.find('td').find('#SelectVATp').val();
            var PurchaseOrderDetailId = row.find('td').find('.PurchaseOrderDetailsId').val();

            var purchase = JSON.stringify({
                PurchaseOrderId: PurchaseOrderId,
                purchaseOrderDetailId: PurchaseOrderDetailId,
                vat: vat,
                total: purchaseTotal
            })
            $.ajax({
                url: "/MvcInvoiceServices/DeleteInvoice",
                type: "POST",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                data: purchase,
                success: function (data) {
                    if (data.Status == "Success") {
                        $("#"+ PurchaseOrderDetailId).remove();
                        calculatevatp();
                        SUMOFALLPRODUCTp();
                        SUMOFALLPRODUCTp();
                        swal({
                            title: 'Service!',
                            text: 'Service save successfully!',
                            type: 'success'
                        });

                    }
                    else if (data.Status == "Fail") {

                        swal({
                            title: 'Invoice!',
                            text: 'fail to remove Invoice!',
                            type: 'danger'
                        });
                    }
                },
                Error: function (errormessage) {
                    swal({
                        title: "Fail!",
                        text: errormessage,
                        icon: "danger",
                    });

                }

            });
        });
    });



    $('#SaveNewProductModelp').click(function () {
        $.ajax({
            url: '/MVCProduct/AddOrEdit',
            type: 'POST',
            data: {
                ProductName: $('#ProductName').val(),
                Description: $('#Description').val(),
                SalePrice: $('#SalePrice').val(),
                PurchasePrice: $('#PurchasePrice').val(),
                Type: $('#Type').val(),
                OpeningQuantity: $('#OpeningQuantity').val()

            },
            success: function (data) {
                $('#CreateNewProductModalAdd').modal('hide');
                LoadProductAdding1();
                $.toast({
                    heading: 'Success',
                    text: 'Your opration has been successfuly completed `loader`',
                    icon: 'info',
                    loader: true,        // Change it to false to disable loader
                    loaderBg: '#9EC600'  // To change the background
                });

                //$("#productTable").ajax.reload();
                //SuccessInsert();
            },
            error: function () {
                alert("error");
            }
        });
    });


    function LoadProductAdding1() {
        debugger;
        $("thead #SelectProductQutationp").find("option").remove();
        $("thead #SelectProductQutationp").prepend("<option value=0>" + 'Select Item' + "</option>");
        $("thead #SelectProductQutationp").append("<option value=AddNewProductSelect>" + 'Add New Product' + "</option>");

        $.ajax({
            url: "/MVCProduct/GetProduct",
            type: "Get",
            async: false,
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {

                $.each(data, function (key, item) {

                    $('thead #SelectProductQutationp').append($('<option></option>').val(item.ProductId).html(item.ProductName));

                });

            },
            Error: function (errormessage) {
                alert(errormessage);
            }

        });
    }


    $('#ProductUnitSelectPurchase').change(function () {

        var value = $(this).val();
        if (value == "AddNewPUnitSelect") {

            $('#CreateNewProductModalAdd').modal('hide');
            $('#UnitModelPurchase').modal('show');
        }

    });

    function LoadProductUnitPurchase() {

        $("#ProductUnitSelectPurchase").find("option").remove();

        $("#ProductUnitSelectPurchase").prepend("<option value=0>" + 'Select Unit' + "</option>");
        $("#ProductUnitSelectPurchase").append("<option value=AddNewPUnitSelect>" + 'Add New Unit' + "</option>");

        $.ajax({
            url: "/MVCProductUnit/GetProductUnit",
            type: "Get",
            async: false,
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {

                $.each(data, function (key, item) {
                    $('#ProductUnitSelectPurchase').append($('<option></option>').val(item.ProductUnitID).html(item.ProductUnit));
                });

            },
            Error: function (errormessage) {
                alert(errormessage);
            }

        });
    }

    $('#SaveNewProductUnitPurchase').click(function () {

        $.ajax({
            url: "/MVCProductUnit/CheckUnitStatus",
            type: "POST",
            data: { name: $('#ProductUnit').val() },
            success: function (Resultdat) {

                console.log(Resultdat);
                if (Resultdat == "Found") {
                    $.toast({
                        heading: 'Already exist',
                        text: 'Unit already exist with nam ' + $('#ProductUnit').val() + ' choose another `Name`',
                        icon: 'info',
                        loader: true,        // Change it to false to disable loader
                        loaderBg: '#FF0000'  // To change the background
                    });
                }
                else {
                    var dataUnit = {

                        ProductUnit: $('#ProductUnit').val(),
                        Status: "true"
                    }
                    $.ajax({
                        url: "/MVCProductUnit/AddorEdit",
                        type: "POST",
                        data: dataUnit,
                        success: function (dat) {
                            CleartUnitTextBoxPurchase();
                            $('#UnitModelPurchase').modal('hide');
                            LoadProductSelect();
                            $('#CreateNewProductModalAdd').modal('show');
                            $.toast({
                                heading: 'Success',
                                text: 'Your opration has been successfuly completed `Thank you`',
                                icon: 'info',
                                loader: true,        // Change it to false to disable loader
                                loaderBg: '#9EC600'  // To change the background
                            });
                        },
                        Error: function (err) {
                            alert("erro");
                        }

                    });
                }

            },
            Error: function (err) {
                alert("erro");
            }

        });


    });

    function CleartUnitTextBoxPurchase() {
        $('#ProductUnit').val("")
    }

    $('#CancelProductUnitPurchase').click(function () {
        CleartUnitTextBoxPurchase();
        $('#CreateNewProductModalAdd').modal('show');
        $('#UnitModelPurchase').modal('hide');
    });

    $(document).ready(function () {

        $(document).on('click', '#RemoveEdit2', function () {
            var row = $(this).closest('tr');

            var QIDId = row.find('td').find('.QutationDetailId').val();
            var total1 = row.find('td').find('.PurchaseTotal').val();
            var vat = row.find('td').find('.VATp').val();
            var QID = row.find('td').find('.QutationID').val();

            var data = JSON.stringify({
                QutationId: QID,
                QutationDetailID: QIDId,
                vat: vat,
                total: total1
            })
            $.ajax({
                url: "/QutationService/DeleteQuatation",
                type: "POST",
                async: false,
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                data: data,
                success: function (data) {
                    if (data.Status == "Success") {
                        $("#" + QIDId).remove();
                        calculatevat();
                        SUMOFALLPRODUCT();
                        sumofGrandModel();
                        swal({
                            title: 'Qutation!',
                            text: 'Qutation delete successfully!',
                            type: 'success'
                        });
                    }
                    else if (data.Status == "Fail") {

                        swal({
                            title: 'Qutation!',
                            text: 'fail to delete qutation!',
                            type: 'danger'
                        });

                    }
                },
                Error: function (errormessage) {
                    alert(errormessage);
                }

            });
        });
    });


    
</script>


